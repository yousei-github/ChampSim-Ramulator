/***
 * THIS FILE IS AUTOMATICALLY GENERATED
 * Do not edit this file. It will be overwritten when the configure script is run.
***/

/* Header */

#include "ProjectConfiguration.h" // User file

#if (USER_CODES == ENABLE)
#include "ChampSim/core_inst.h"

#else
#include "ChampSim/branch/hashed_perceptron/folded_shift_register.h"
#include "ChampSim/branch/hashed_perceptron/hashed_perceptron.h"
#include "ChampSim/btb/basic_btb/basic_btb.h"
#include "ChampSim/btb/basic_btb/direct_predictor.h"
#include "ChampSim/btb/basic_btb/indirect_predictor.h"
#include "ChampSim/btb/basic_btb/return_stack.h"
#include "ChampSim/prefetcher/no/no.h"
#include "ChampSim/replacement/lru/lru.h"
#endif /* USER_CODES */

#if (USER_CODES == ENABLE)

#if (RAMULATOR == ENABLE)

/* No code here */

#else

champsim::configured::generated_environment<CHAMPSIM_BUILD>::generated_environment()
: /* Hardwares' channels' initialization */
  channels {
      /* CPU 0's channels */
      // CPU0_PTW_to_CPU0_L1D_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
      // CPU0_DTLB_to_CPU0_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU0_ITLB_to_CPU0_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU0_L1D_to_CPU0_L2C_Queues
      champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU0_L1I_to_CPU0_L2C_Queues
      champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU0_L2C_to_LLC_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU0_STLB_to_CPU0_PTW_Queues
      champsim::channel {                                     32,                                       0,                                       0,  champsim::data::bits {champsim::lg2(PAGE_SIZE)}, 0},
      // CPU0_L1D_to_CPU0_DTLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
      // CPU0_L1I_to_CPU0_ITLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
      // CPU0_L2C_to_CPU0_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU0_to_CPU0_L1I_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
      // CPU0_to_CPU0_L1D_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},

#if (CPU_USE_MULTIPLE_CORES == ENABLE)
      /* CPU 1's channels */
      // CPU1_PTW_to_CPU1_L1D_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
      // CPU1_DTLB_to_CPU1_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU1_ITLB_to_CPU1_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU1_L1D_to_CPU1_L2C_Queues
      champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU1_L1I_to_CPU1_L2C_Queues
      champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU1_L2C_to_LLC_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 0},
      // CPU1_STLB_to_CPU1_PTW_Queues
      champsim::channel {                                     32,                                       0,                                       0,  champsim::data::bits {champsim::lg2(PAGE_SIZE)}, 0},
      // CPU1_L1D_to_CPU1_DTLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
      // CPU1_L1I_to_CPU1_ITLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
      // CPU1_L2C_to_CPU1_STLB_Queues
      champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
      // CPU1_to_CPU1_L1I_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
      // CPU1_to_CPU1_L1D_Queues
      champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},

#endif /* CPU_USE_MULTIPLE_CORES */

      /* LLC_to_DRAM_Queues */
      champsim::channel {std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), champsim::data::bits {champsim::lg2(BLOCK_SIZE)}, 0}
},
  /* Memory's initialization */
  DRAM {champsim::chrono::picoseconds {312}, champsim::chrono::picoseconds {625}, std::size_t {24}, std::size_t {24}, std::size_t {24}, std::size_t {52}, champsim::chrono::microseconds {32000}, {&channels.at(index_type(ChannelIndex::LLC_to_DRAM_Queues))}, 64, 64, 1, champsim::data::bytes {8}, 65536, 1024, 1, 8, 4, 8192},

  /* Virtual memory's initialization */
  vmem {champsim::data::bytes {4096}, 5, champsim::chrono::picoseconds {250 * 200}, DRAM, 1},

  /* Page table walker's initialization */
  ptws {build<PageTableWalker>(
      /** CPU 0's page table walker */
      champsim::ptw_builder {
          champsim::defaults::default_ptw}
          .name("cpu0_PTW")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_STLB_to_CPU0_PTW_Queues))})
          .virtual_memory(&vmem)
          .cpu(CPU_0)
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_PTW_to_CPU0_L1D_Queues)))
          .clock_period(champsim::chrono::picoseconds {250})
#if (CPU_USE_MULTIPLE_CORES == ENABLE)
          ,
      /** CPU 1's page table walker */
      champsim::ptw_builder {
          champsim::defaults::default_ptw}
          .name("cpu1_PTW")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU1_STLB_to_CPU1_PTW_Queues))})
          .virtual_memory(&vmem)
          .cpu(CPU_1)
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_PTW_to_CPU1_L1D_Queues)))
          .clock_period(champsim::chrono::picoseconds {250})
#endif /* CPU_USE_MULTIPLE_CORES */
          )},

  /* Caches' initialization */
  caches {build<CACHE>(
      /** CPU 0's caches */
      // Data translation lookaside buffer (DTLB)
      champsim::cache_builder {
          champsim::defaults::default_dtlb}
          .name("cpu0_DTLB")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_L1D_to_CPU0_DTLB_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_DTLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_DTLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_DTLB_to_CPU0_STLB_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Instruction translation lookaside buffer (ITLB)
      champsim::cache_builder {
          champsim::defaults::default_itlb}
          .name("cpu0_ITLB")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_L1I_to_CPU0_ITLB_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_ITLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_ITLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_ITLB_to_CPU0_STLB_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 1 data cache
      champsim::cache_builder {
          champsim::defaults::default_l1d}
          .name("cpu0_L1D")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU0_PTW_to_CPU0_L1D_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU0_to_CPU0_L1D_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L1D_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L1D_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU0_L1D_to_CPU0_DTLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_L1D_to_CPU0_L2C_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 1 instruction cache
      champsim::cache_builder {
          champsim::defaults::default_l1i}
          .name("cpu0_L1I")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_to_CPU0_L1I_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L1I_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L1I_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU0_L1I_to_CPU0_ITLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_L1I_to_CPU0_L2C_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 2 cache
      champsim::cache_builder {
          champsim::defaults::default_l2c}
          .name("cpu0_L2C")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU0_L1D_to_CPU0_L2C_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU0_L1I_to_CPU0_L2C_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L2C_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L2C_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU0_L2C_to_CPU0_STLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_L2C_to_LLC_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Second Level TLB
      champsim::cache_builder {
          champsim::defaults::default_stlb}
          .name("cpu0_STLB")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU0_DTLB_to_CPU0_STLB_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU0_ITLB_to_CPU0_STLB_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU0_L2C_to_CPU0_STLB_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_STLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_STLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU0_STLB_to_CPU0_PTW_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),

#if (CPU_USE_MULTIPLE_CORES == ENABLE)
      /** CPU 1's caches */
      // Data translation lookaside buffer (DTLB)
      champsim::cache_builder {
          champsim::defaults::default_dtlb}
          .name("cpu1_DTLB")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU1_L1D_to_CPU1_DTLB_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_DTLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_DTLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_DTLB_to_CPU1_STLB_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Instruction translation lookaside buffer (ITLB)
      champsim::cache_builder {
          champsim::defaults::default_itlb}
          .name("cpu1_ITLB")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU1_L1I_to_CPU1_ITLB_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_ITLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_ITLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_ITLB_to_CPU1_STLB_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 1 data cache
      champsim::cache_builder {
          champsim::defaults::default_l1d}
          .name("cpu1_L1D")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU1_PTW_to_CPU1_L1D_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU1_to_CPU1_L1D_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L1D_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L1D_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU1_L1D_to_CPU1_DTLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_L1D_to_CPU1_L2C_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 1 instruction cache
      champsim::cache_builder {
          champsim::defaults::default_l1i}
          .name("cpu1_L1I")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU1_to_CPU1_L1I_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L1I_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L1I_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU1_L1I_to_CPU1_ITLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_L1I_to_CPU1_L2C_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Level 2 cache
      champsim::cache_builder {
          champsim::defaults::default_l2c}
          .name("cpu1_L2C")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU1_L1D_to_CPU1_L2C_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU1_L1I_to_CPU1_L2C_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class CPU_L2C_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_L2C_PREFETCHER>()
          .lower_translate(&channels.at(index_type(ChannelIndex::CPU1_L2C_to_CPU1_STLB_Queues)))
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_L2C_to_LLC_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
      // Second Level TLB
      champsim::cache_builder {
          champsim::defaults::default_stlb}
          .name("cpu1_STLB")
          .upper_levels(
              {{&channels.at(index_type(ChannelIndex::CPU1_DTLB_to_CPU1_STLB_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU1_ITLB_to_CPU1_STLB_Queues)),
                  &channels.at(index_type(ChannelIndex::CPU1_L2C_to_CPU1_STLB_Queues))}})
          .offset_bits(champsim::data::bits {champsim::lg2(4096)})
          .replacement<class CPU_STLB_REPLACEMENT_POLICY>()
          .prefetcher<class CPU_STLB_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::CPU1_STLB_to_CPU1_PTW_Queues)))
          .clock_period(champsim::chrono::picoseconds {250}),
#endif /* CPU_USE_MULTIPLE_CORES */

#if (CPU_USE_MULTIPLE_CORES == DISABLE)
      /** Last level cache (LLC) */
      champsim::cache_builder {
          champsim::defaults::default_llc}
          .name("LLC")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_L2C_to_LLC_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class LLC_REPLACEMENT_POLICY>()
          .prefetcher<class LLC_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::LLC_to_DRAM_Queues)))
          .clock_period(champsim::chrono::picoseconds {250})
#else
      champsim::cache_builder {
          champsim::defaults::default_llc}
          .name("LLC")
          .upper_levels({&channels.at(index_type(ChannelIndex::CPU0_L2C_to_LLC_Queues)), &channels.at(index_type(ChannelIndex::CPU1_L2C_to_LLC_Queues))})
          .offset_bits(champsim::data::bits {champsim::lg2(64)})
          .replacement<class LLC_REPLACEMENT_POLICY>()
          .prefetcher<class LLC_PREFETCHER>()
          .lower_level(&channels.at(index_type(ChannelIndex::LLC_to_DRAM_Queues)))
          .clock_period(champsim::chrono::picoseconds {250})
#endif /* CPU_USE_MULTIPLE_CORES */
          )},

  /* CPUs' initialization */
  cores {build<O3_CPU>(
      /* CPU 0 */
      champsim::core_builder {
          champsim::defaults::default_core}
          .l1i(&(*std::next(std::begin(caches), 4)))
          .l1i_bandwidth((*std::next(std::begin(caches), 4)).MAX_TAG)
          .fetch_queues(&channels.at(index_type(ChannelIndex::CPU0_to_CPU0_L1I_Queues)))
          .l1d_bandwidth((*std::next(std::begin(caches), 3)).MAX_TAG)
          .data_queues(&channels.at(index_type(ChannelIndex::CPU0_to_CPU0_L1D_Queues)))
          .branch_predictor<class CPU_BRANCH_PREDICTOR>()
          .btb<class CPU_BRANCH_TARGET_BUFFER>()
          .index(CPU_0)
          .clock_period(champsim::chrono::picoseconds {250})

#if (CPU_USE_MULTIPLE_CORES == ENABLE)
          ,
      /* CPU 1 */
      champsim::core_builder {
          champsim::defaults::default_core}
          .l1i(&(*std::next(std::begin(caches), 4)))
          .l1i_bandwidth((*std::next(std::begin(caches), 4)).MAX_TAG)
          .fetch_queues(&channels.at(index_type(ChannelIndex::CPU1_to_CPU1_L1I_Queues)))
          .l1d_bandwidth((*std::next(std::begin(caches), 3)).MAX_TAG)
          .data_queues(&channels.at(index_type(ChannelIndex::CPU1_to_CPU1_L1D_Queues)))
          .branch_predictor<class CPU_BRANCH_PREDICTOR>()
          .btb<class CPU_BRANCH_TARGET_BUFFER>()
          .index(CPU_1)
          .clock_period(champsim::chrono::picoseconds {250})
#endif /* CPU_USE_MULTIPLE_CORES */
          )}
{
}

auto champsim::configured::generated_environment<CHAMPSIM_BUILD>::cpu_view() -> std::vector<std::reference_wrapper<O3_CPU> >
{
    std::vector<std::reference_wrapper<O3_CPU> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<CHAMPSIM_BUILD>::cache_view() -> std::vector<std::reference_wrapper<CACHE> >
{
    std::vector<std::reference_wrapper<CACHE> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<CHAMPSIM_BUILD>::ptw_view() -> std::vector<std::reference_wrapper<PageTableWalker> >
{
    std::vector<std::reference_wrapper<PageTableWalker> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<CHAMPSIM_BUILD>::operable_view() -> std::vector<std::reference_wrapper<champsim::operable> >
{
    std::vector<std::reference_wrapper<champsim::operable> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref<champsim::operable>(x); };
    std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
    std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
    std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
    retval.push_back(std::ref<champsim::operable>(DRAM));
    return retval;
}

auto champsim::configured::generated_environment<CHAMPSIM_BUILD>::dram_view() -> MEMORY_CONTROLLER&
{
    return DRAM;
}

#endif /* RAMULATOR */

#else
/* Original code of ChampSim */

champsim::configured::generated_environment<0x11a7870cb042c20b>::generated_environment(): channels {
                                                                                              champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
                                                                                              champsim::channel {std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), std::numeric_limits<std::size_t>::max(), champsim::data::bits {champsim::lg2(BLOCK_SIZE)}, 0},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,         champsim::data::bits {champsim::lg2(64)}, 0},
                                                                                              champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 0},
                                                                                              champsim::channel {                                     32,                                       0,                                       0,  champsim::data::bits {champsim::lg2(PAGE_SIZE)}, 0},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 1},
                                                                                              champsim::channel {                                     16,                                      16,                                      16,       champsim::data::bits {champsim::lg2(4096)}, 0},
                                                                                              champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1},
                                                                                              champsim::channel {                                     32,                                      32,                                      32,         champsim::data::bits {champsim::lg2(64)}, 1}
},
                                                                                          DRAM {champsim::chrono::picoseconds {312}, champsim::chrono::picoseconds {625}, std::size_t {24}, std::size_t {24}, std::size_t {24}, std::size_t {52}, champsim::chrono::microseconds {32000}, {&channels.at(1)}, 64, 64, 1, champsim::data::bytes {8}, 65536, 1024, 1, 8, 4, 8192}, vmem {champsim::data::bytes {4096}, 5, champsim::chrono::picoseconds {250 * 200}, DRAM, 1}, ptws {build<PageTableWalker>(champsim::ptw_builder {champsim::defaults::default_ptw}.name("cpu0_PTW").upper_levels({&channels.at(7)}).virtual_memory(&vmem).name("cpu0_PTW").cpu(0).lower_level(&channels.at(0)).clock_period(champsim::chrono::picoseconds {250}))}, caches {build<CACHE>(champsim::cache_builder {champsim::defaults::default_llc}.name("LLC").upper_levels({&channels.at(6)}).offset_bits(champsim::data::bits {champsim::lg2(64)}).replacement<class lru>().prefetcher<class no>().lower_level(&channels.at(1)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_dtlb}.name("cpu0_DTLB").upper_levels({&channels.at(8)}).offset_bits(champsim::data::bits {champsim::lg2(4096)}).replacement<class lru>().prefetcher<class no>().lower_level(&channels.at(2)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_itlb}.name("cpu0_ITLB").upper_levels({&channels.at(9)}).offset_bits(champsim::data::bits {champsim::lg2(4096)}).replacement<class lru>().prefetcher<class no>().lower_level(&channels.at(3)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_l1d}.name("cpu0_L1D").upper_levels({{&channels.at(0), &channels.at(12)}}).offset_bits(champsim::data::bits {champsim::lg2(64)}).replacement<class lru>().prefetcher<class no>().lower_translate(&channels.at(8)).lower_level(&channels.at(4)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_l1i}.name("cpu0_L1I").upper_levels({&channels.at(11)}).offset_bits(champsim::data::bits {champsim::lg2(64)}).replacement<class lru>().prefetcher<class no>().lower_translate(&channels.at(9)).lower_level(&channels.at(5)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_l2c}.name("cpu0_L2C").upper_levels({{&channels.at(4), &channels.at(5)}}).offset_bits(champsim::data::bits {champsim::lg2(64)}).replacement<class lru>().prefetcher<class no>().lower_translate(&channels.at(10)).lower_level(&channels.at(6)).clock_period(champsim::chrono::picoseconds {250}), champsim::cache_builder {champsim::defaults::default_stlb}.name("cpu0_STLB").upper_levels({{&channels.at(2), &channels.at(3), &channels.at(10)}}).offset_bits(champsim::data::bits {champsim::lg2(4096)}).replacement<class lru>().prefetcher<class no>().lower_level(&channels.at(7)).clock_period(champsim::chrono::picoseconds {250}))}, cores {build<O3_CPU>(champsim::core_builder {champsim::defaults::default_core}.l1i(&(*std::next(std::begin(caches), 4))).l1i_bandwidth((*std::next(std::begin(caches), 4)).MAX_TAG).fetch_queues(&channels.at(11)).l1d_bandwidth((*std::next(std::begin(caches), 3)).MAX_TAG).data_queues(&channels.at(12)).branch_predictor<class hashed_perceptron>().btb<class basic_btb>().index(0).clock_period(champsim::chrono::picoseconds {250}))}
{
}

auto champsim::configured::generated_environment<0x11a7870cb042c20b>::cpu_view() -> std::vector<std::reference_wrapper<O3_CPU> >
{
    std::vector<std::reference_wrapper<O3_CPU> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<0x11a7870cb042c20b>::cache_view() -> std::vector<std::reference_wrapper<CACHE> >
{
    std::vector<std::reference_wrapper<CACHE> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<0x11a7870cb042c20b>::ptw_view() -> std::vector<std::reference_wrapper<PageTableWalker> >
{
    std::vector<std::reference_wrapper<PageTableWalker> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref(x); };
    std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
    return retval;
}

auto champsim::configured::generated_environment<0x11a7870cb042c20b>::operable_view() -> std::vector<std::reference_wrapper<champsim::operable> >
{
    std::vector<std::reference_wrapper<champsim::operable> > retval {};
    auto make_ref = [](auto& x)
    { return std::ref<champsim::operable>(x); };
    std::transform(std::begin(cores), std::end(cores), std::back_inserter(retval), make_ref);
    std::transform(std::begin(caches), std::end(caches), std::back_inserter(retval), make_ref);
    std::transform(std::begin(ptws), std::end(ptws), std::back_inserter(retval), make_ref);
    retval.push_back(std::ref<champsim::operable>(DRAM));
    return retval;
}

auto champsim::configured::generated_environment<0x11a7870cb042c20b>::dram_view() -> MEMORY_CONTROLLER&
{
    return DRAM;
}

#endif /* USER_CODES */
