{
    /** User guide: https://code.visualstudio.com/docs/cpp/c-cpp-properties-schema-reference */
    /**
     * An array of user-defined variables that will be available for substitution in the configurations via the standard environment variable syntax: ${<var>} or ${env:<var>}.
     * Strings and arrays of strings are accepted.
     */
    "env": {
        "projectBaseIncludePath": [
            "${workspaceFolder}/include/"
        ],
        "projectBaseDefine": [
            "DEBUG"
        ]
    },
    /**
     * An array of configuration objects that provide the IntelliSense engine with information about your project and your preferences.
     * By default, the extension creates a configuration for you based on your operating system. You may also add additional configurations.
     */
    "configurations": [
        {
            /**
             * A friendly name that identifies a configuration.
             * Linux, Mac, and Win32 are special identifiers for configurations that will be autoselected on those platforms.
             * The status bar in VS Code will show you which configuration is active.
             * You can also select the label in the status bar to change the active configuration.
             */
            "name": "[Linux] Normal",
            /**
             * (optional) The full path to the compiler you use to build your project, for example /usr/bin/gcc, to enable more accurate IntelliSense.
             * The extension will query the compiler to determine the system include paths and default defines to use for IntelliSense.
             * 
             * Putting "compilerPath": "" (empty string) will skip querying a compiler.
             * This is useful if a specified compiler doesn't support the arguments that are used for the query, as the extension will default back to any compiler it can find (like Visual C).
             * Leaving out the compilerPath property does not skip the query.
             */
            "compilerPath": "/usr/bin/gcc",
            /**
             * (optional) Compiler arguments to modify the includes or defines used, for example -nostdinc++, -m32, etc.
             * Arguments that take additional space-delimited arguments should be entered as separate arguments in the array, for example, for --sysroot <arg> use \"--sysroot\", \"<arg>\".
             */
            "compilerArgs": [],
            /**
             * The version of the C language standard to use for IntelliSense. For example, c17, gnu23, or ${default}.
             * Note that GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C standard version.
             */
            "cStandard": "gnu17",
            /**
             * The version of the C++ language standard to use for IntelliSense. For example, c++20, gnu++23, or ${default}.
             * Note: GNU standards are only used to query the set compiler to get GNU defines, and IntelliSense will emulate the equivalent C++ standard version.
             */
            "cppStandard": "gnu++17",
            /**
             * The IntelliSense mode to use that maps to an architecture-specific variant of MSVC, gcc, or Clang.
             * If not set or if set to ${default}, the extension will choose the default for that platform.
             *
             * Platform defaults:
             * - Windows: windows-msvc-x64
             * - Linux: linux-gcc-x64
             * - macOS: macos-clang-x64
             *
             * IntelliSense modes that only specify <compiler>-<architecture> variants (for example, gcc-x64) are legacy modes and are automatically converted to the <platform>-<compiler>-<architecture> variants based on the host platform.
             */
            "intelliSenseMode": "linux-gcc-x64",
            /**
             * An include path is a folder that contains header files (such as #include "myHeaderFile.h") that are included in a source file.
             * Specify a list of paths for the IntelliSense engine to use while searching for included header files.
             * Searching on these paths is not recursive. Specify ** to indicate recursive search.
             * For example, ${workspaceFolder}/** will search through all subdirectories while ${workspaceFolder} will not.
             * If on Windows with Visual Studio installed, or if a compiler is specified in the compilerPath setting, it is not necessary to list the system include paths in this list.
             */
            "includePath": [
                "${projectBaseIncludePath}",
                "${workspaceFolder}/vcpkg_installed/x64-linux/include/"
            ],
            /**
             * A list of preprocessor definitions for the IntelliSense engine to use while parsing files.
             * Optionally, use = to set a value, for example VERSION=1.
             */
            "defines": [
                "${projectBaseDefine}"
            ]
            /**
             * The ID of a VS Code extension that can provide IntelliSense configuration information for source files.
             * For example, use the VS Code extension ID ms-vscode.cmake-tools to provide configuration information from the CMake Tools extension.
             * If you have specified a configurationProvider, the configurations that provides will take precedence over your other settings in c_cpp_properties.json.
             */
            // "configurationProvider": [],
            /** The versions of the Windows SDK include path to use on Windows, for example 10.0.17134.0. */
            // "windowsSdkVersion": "10.0.19041.0",
            /**
             * A list of paths for the IntelliSense engine to use while searching for included headers from Mac frameworks.
             * Only supported on configurations for macOS.
             */
            // "macFrameworkPath": ["/System/Library/Frameworks", "/Library/Frameworks"],
            /** 
             * (optional) A list of files that should be included before any other characters in the source file are processed.
             * Files are included in the order listed.
             */
            // "forcedInclude": [
            //     "${workspaceFolder}/common.h"
            // ],
        }
    ],
    "version": 4
}