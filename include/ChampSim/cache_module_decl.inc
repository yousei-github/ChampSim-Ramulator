/***
 * THIS FILE IS AUTOMATICALLY GENERATED
 * Do not edit this file. It will be overwritten when the configure script is run.
 ***/

constexpr static unsigned long long pprefetcherDip_stride       = 1ull << 0;
constexpr static unsigned long long pprefetcherDnext_line       = 1ull << 1;
constexpr static unsigned long long pprefetcherDnext_line_instr = 1ull << 2;
constexpr static unsigned long long pprefetcherDno              = 1ull << 3;
constexpr static unsigned long long pprefetcherDno_instr        = 1ull << 4;
constexpr static unsigned long long pprefetcherDspp_dev         = 1ull << 5;
constexpr static unsigned long long pprefetcherDva_ampm_lite    = 1ull << 6;

constexpr static unsigned long long rreplacementDdrrip          = 1ull << 0;
constexpr static unsigned long long rreplacementDlru            = 1ull << 1;
constexpr static unsigned long long rreplacementDship           = 1ull << 2;
constexpr static unsigned long long rreplacementDsrrip          = 1ull << 3;

[[]] void pref_prefetcherDip_stride_prefetcher_initialize();
[[]] void pref_prefetcherDnext_line_prefetcher_initialize();
[[]] void ipref_prefetcherDnext_line_instr_prefetcher_initialize();
[[]] void pref_prefetcherDno_prefetcher_initialize();
[[]] void ipref_prefetcherDno_instr_prefetcher_initialize();
[[]] void pref_prefetcherDspp_dev_prefetcher_initialize();
[[]] void pref_prefetcherDva_ampm_lite_prefetcher_initialize();

[[nodiscard]] uint32_t pref_prefetcherDip_stride_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDnext_line_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDnext_line_instr_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDno_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDno_instr_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDspp_dev_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDva_ampm_lite_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, bool, uint8_t, uint32_t);

[[nodiscard]] uint32_t pref_prefetcherDip_stride_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDnext_line_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDnext_line_instr_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDno_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDno_instr_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDspp_dev_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDva_ampm_lite_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);

[[]] void pref_prefetcherDip_stride_prefetcher_cycle_operate();
[[]] void pref_prefetcherDnext_line_prefetcher_cycle_operate();
[[]] void ipref_prefetcherDnext_line_instr_prefetcher_cycle_operate();
[[]] void pref_prefetcherDno_prefetcher_cycle_operate();
[[]] void ipref_prefetcherDno_instr_prefetcher_cycle_operate();
[[]] void pref_prefetcherDspp_dev_prefetcher_cycle_operate();
[[]] void pref_prefetcherDva_ampm_lite_prefetcher_cycle_operate();

[[]] void pref_prefetcherDip_stride_prefetcher_final_stats();
[[]] void pref_prefetcherDnext_line_prefetcher_final_stats();
[[]] void ipref_prefetcherDnext_line_instr_prefetcher_final_stats();
[[]] void pref_prefetcherDno_prefetcher_final_stats();
[[]] void ipref_prefetcherDno_instr_prefetcher_final_stats();
[[]] void pref_prefetcherDspp_dev_prefetcher_final_stats();
[[]] void pref_prefetcherDva_ampm_lite_prefetcher_final_stats();

// Assert data prefetchers do not operate on branches
[[noreturn]] void pref_prefetcherDip_stride_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }

[[noreturn]] void pref_prefetcherDnext_line_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }

[[noreturn]] void pref_prefetcherDno_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }

[[noreturn]] void pref_prefetcherDspp_dev_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }

[[noreturn]] void pref_prefetcherDva_ampm_lite_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }

[[]] void ipref_prefetcherDnext_line_instr_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t);
[[]] void ipref_prefetcherDno_instr_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t);

[[]] void repl_replacementDdrrip_initialize_replacement();
[[]] void repl_replacementDlru_initialize_replacement();
[[]] void repl_replacementDship_initialize_replacement();
[[]] void repl_replacementDsrrip_initialize_replacement();

[[nodiscard]] uint32_t repl_replacementDdrrip_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t repl_replacementDlru_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t repl_replacementDship_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t repl_replacementDsrrip_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);

[[]] void repl_replacementDdrrip_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);
[[]] void repl_replacementDlru_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);
[[]] void repl_replacementDship_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);
[[]] void repl_replacementDsrrip_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);

[[]] void repl_replacementDdrrip_replacement_final_stats();
[[]] void repl_replacementDlru_replacement_final_stats();
[[]] void repl_replacementDship_replacement_final_stats();
[[]] void repl_replacementDsrrip_replacement_final_stats();
